autoinstall:
  version: 1
  early-commands: []
  locale: en_US.UTF-8
  refresh-installer:
    update: false
    channel: "stable/ubuntu-$REL"
  keyboard:
    layout: us
    toggle: null
    variant: ""
  source:
    id: ubuntu-desktop-minimal
    search_drivers: true
  network:
    ethernets:
      enp6s0:
        dhcp4: true
    version: 2
    wifis: {}
  proxy: null
  apt:
    disable_components: []
    fallback: offline-install
    geoip: true
    mirror-selection:
      primary:
        - country-mirror
        - arches: &id001
            - amd64
            - i386
          uri: http://archive.ubuntu.com/ubuntu/
        - arches: &id002
            - s390x
            - arm64
            - armhf
            - powerpc
            - ppc64el
            - riscv64
          uri: http://ports.ubuntu.com/ubuntu-ports
    preserve_sources_list: false
    security:
      - arches: *id001
        uri: http://security.ubuntu.com/ubuntu/
      - arches: *id002
        uri: http://ports.ubuntu.com/ubuntu-ports
  storage:
    layout:
      name: lvm
  identity:
    # Update
    hostname: <hostname>
    password: <sha-512+salt password hash. Use mkpasswd -m SHA-512 --salt <salt> to generate one>
    realname: <Real User Name>
    username: <username>
  ubuntu-pro:
    token: <token>
  ssh:
    # Update
    install-server: true
    allow-pw: false
    authorized-keys:
      - <ssh public key>
  codecs:
    install: false
  drivers:
    install: true
  oem:
    install: auto
  snaps:
    - name: nvim
      classic: true
    - name: alacritty
      classic: true
    - name: code
      classic: true
  packages:
    - git
    - build-essential
    - curl
    - dos2unix
  timezone: America/Los_Angeles
  updates: all
  shutdown: reboot
  late-commands:
    - |
      user_name=<username>

      printf "%s\n" "user_name variable: $user_name"
      echo "Defaults timestamp_timeout=60" | (EDITOR="tee -a" visudo -f /target/etc/sudoers.d/$user_name)
      echo "Defaults passwd_tries=3" | (EDITOR="tee -a" visudo -f /target/etc/sudoers.d/$user_name)
      chmod 440 /target/etc/sudoers.d/$user_name

      echo "PermitRootLogin no" | tee -a /target/etc/ssh/sshd_config.d/$user_name.conf
      echo "PasswordAuthentication no" | tee -a /target/etc/ssh/sshd_config.d/$user_name.conf
      echo "ClientAliveInterval 60" | tee -a /target/etc/ssh/sshd_config.d/$user_name.conf
      echo "ClientAliveCountMax 60" | tee -a /target/etc/ssh/sshd_config.d/$user_name.conf

      # Message of the Day
      chmod -x /target/etc/update-motd.d/10-help-text
      rm /target/etc/legal
      cat << EOF | tee -a /target/etc/update-motd.d/99-post-install
      #!/bin/sh
      printf "%s\n" "Post install instructions:" \\
      "GitHub -" \\
      "Copy ssh keys with scp OR create new ones and verify functioning access" \\
      "Yubiko Keys -" \\
      "With key inserted, run pamu2fcfg | tee -a ~/.config/u2f_keys" \\
      "Repeat for backup key(s) with append pamu2fcfg -n | tee -a ~/.config/u2f_keys" \\
      "Execute sudo /etc/post_install.sh"
      EOF
      chmod 755 /target/etc/update-motd.d/99-post-install

      # Inline script that updates as root after the user has been created at first login
      # Deletes itself after running
      cat <<EOF | tee -a /target/etc/post_install.sh
      #!/bin/bash

      if [[ "\$USER" != "root" ]]
        then echo "Expecting USER=root, run with \"sudo -i\""
        exit
      fi

      # Update default editor and terminal
      update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /snap/alacritty/current/bin/alacritty 50
      update-alternatives --auto x-terminal-emulator
      update-alternatives --install /usr/bin/editor editor /snap/nvim/current/bin/nvim-wrapper 50
      update-alternatives --auto editor
      update-alternatives --install /usr/bin/vim vim /snap/nvim/current/bin/nvim-wrapper 50
      update-alternatives --auto vim
      update-alternatives --install /usr/bin/vi vi /snap/nvim/current/bin/nvim-wrapper 50
      update-alternatives --auto vi

      # Enable Yubikey for sudo
      mkdir -p /etc/Yubico
      mv /home/$user_name/.config/u2f_keys /etc/Yubico/
      cd /etc/pam.d
      echo 'auth required pam_u2f.so authfile=/etc/Yubico/u2f_keys cue' > common-u2f
      for f in \$(grep -l "@include common-auth" *); do
        if [[ "\$f" == *"~" ]]; then continue; fi
        if grep -q "@include common-u2f" \$f; then continue; fi
        printf "%s\n" "Updating \$f"
        mv \$f \$f~
        awk '/@include common-auth/ {print;print "@include common-u2f";next}1' \$f~ > \$f
      done

      printf "%s\n" "Deleting post_install.sh"
      rm /etc/update-motd.d/99-post-install
      rm /etc/post_install.sh
      EOF
      chmod +x /target/etc/post_install.sh
    - sed -i 's/#WaylandEnable=false/WaylandEnable=true/g' /target/etc/gdm3/custom.conf
    - curtin in-target -- curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -q -y
    - curtin in-target -- git config --system init.defaultBranch main
    - curtin in-target -- git config --system color.ui true
    - curtin in-target -- git config --system merge.conflictStyle zdiff3
    - curtin in-target -- git config --system core.editor "nvim"
    - curtin in-target -- git config --system user.name <name>
    - curtin in-target -- git config --system user.email <email>
    - curtin in-target -- add-apt-repository -y ppa:yubico/stable && apt-get update
    - curtin in-target -- apt-get install -y libpam-u2f
  reporting:
    builtin:
      type: print
