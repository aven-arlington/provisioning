# Ansible playbook for a standard Ubuntu 24.04 development machine
- name: ubuntu 24.04 setup
  hosts: ubuntu
  gather_facts: true
  module_defaults:
    ansible.builtin.shell:
      executable: /bin/bash
  vars:
    temp_loc: "/tmp/"
  tasks:
    - name: core ubuntu setup
      become: true
      block:
        - name: apt update and upgrade
          ansible.builtin.apt:
            update_cache: true
            upgrade: true
        - name: install packages via apt
          ansible.builtin.apt:
            name:
              - ubuntu-advantage-tools
              - build-essential
              - cmake
              - openssh-server
              - git
              - curl
              - python3-venv
              - dos2unix
              - xclip
              - gzip
              - scdoc
              - keychain
              - jq
        - name: system wide sudo configuration
          ansible.builtin.template:
            src: ../templates/sudoers.j2
            dest: /etc/sudoers.d/{{ansible_user_id}}
            owner: root
            group: root
            mode: "0600"
            validate: /usr/sbin/visudo -cf %s
          vars:
            sudo_timestamp_timeout: 60
            sudo_passwd_tries: 3
        - name: system wide sshd configuration
          ansible.builtin.template:
            src: ../templates/sshd.conf.j2
            dest: /etc/ssh/sshd_config.d/{{ansible_user_id}}.conf
            owner: root
            group: root
            mode: "0600"
            validate: /usr/sbin/sshd -t -f %s
          vars:
            sshd_permit_root_login: "no"
            sshd_password_authentication: "no"
            sshd_client_alive_interval: 60
            sshd_client_alive_count_max: 60
        - name: remove pre-installed ssh config
          ansible.builtin.file:
            path: /etc/ssh/sshd_config.d/50-cloud-init.conf
            state: absent
        - name: remove sudo hint from bashrc
          ansible.builtin.command: sed -i -e '/sudo hint/,+11 s/^/#/' /etc/bash.bashrc
        - name: remove the legal quips from motd
          ansible.builtin.file:
            path: /etc/legal
            state: absent
        - name: Change file ownership, group and permissions
          ansible.builtin.file:
            path: /etc/update-motd.d/10-help-text
            mode: "0655"
        - name: create XDG folders
          become: false
          ansible.builtin.file:
            path: ~/{{ item }}
            state: directory
            mode: 0700
          loop:
            - .config
            - .local
            - .local/bin
            - .local/share
    - name: optional yubico setup
      become: true
      block:
        - name: add yubico ppa
          ansible.builtin.apt_repository:
            repo: ppa:yubico/stable
        - name: update apt cache
          ansible.builtin.apt:
            update_cache: true
        - name: install packages via apt
          ansible.builtin.apt:
            name:
              - libpam-u2f
              - yubikey-manager
        - name: yubikey setup script template
          become: false
          ansible.builtin.template:
            src: ../templates/yubikey_setup.j2
            dest: /home/{{ansible_user_id}}/yubikey_setup.sh
            mode: "0744"
    - name: optional keychain setup
      block:
        - name: apt update
          become: true
          ansible.builtin.apt:
            update_cache: true
            upgrade: true
        - name: install packages via apt
          become: true
          ansible.builtin.apt:
            name:
              - keychain
        - name: Use a single pattern that contains a comma formatted as a list
          ansible.builtin.find:
            paths: ~/.ssh/
            file_type: file
            use_regex: yes
            patterns: ['^(?!.*(ed_ke|wn_ho))(?:[^_\n]*_)+[^_\n]*$']
          register: key_names
        - name: keychain setup
          ansible.builtin.shell: |
            printf '%s\n' 'eval `keychain --eval --quiet --agents ssh {{ item.path | basename }}`' >> ~/.bashrc
          loop: "{{key_names.files if key_names.files is iterable else []}}"
          loop_control:
            label: "{{ item.path | basename }}"
    - name: python installation
      block:
        - name: install common python modules
          ansible.builtin.pip:
            virtualenv_command: "{{ discovered_interpreter_python }} -m venv"
            virtualenv: "/home/{{ansible_user_id}}/.venv"
            name:
              - poetry
              - flake9
              - black
              - pytest
              - ruff
              - mkdocs
              - requests
              - matplotlib
              - numpy
              - pandas
              - bokeh
    - name: rust installation
      block:
        - name: check if cargo is installed
          shell: command -v cargo
          register: cargo_exists
          ignore_errors: true
        - name: download rust installer
          when: cargo_exists is failed
          ansible.builtin.get_url:
            url: https://sh.rustup.rs
            dest: /tmp/sh.rustup.sh
            mode: "0755"
            force: true
        - name: install rustup and cargo
          when: cargo_exists is failed
          shell: /tmp/sh.rustup.sh -y
          tags:
            - rust
        - name: create shell completions
          when: cargo_exists is failed
          become: false
          ansible.builtin.shell: |
            source "$HOME/.cargo/env"
            rustup completions bash rustup >> /tmp/rustup
            rustup completions bash cargo >> /tmp/cargo
        - name: shell completions
          when: cargo_exists is failed
          become: true
          ansible.builtin.shell: |
            sudo cp /tmp/rustup /etc/bash_completion.d/rustup
            sudo cp /tmp/cargo /etc/bash_completion.d/cargo
        - name: install rust-analyzer
          when: cargo_exists is failed
          ansible.builtin.shell: |
            source "$HOME/.cargo/env"
            rustup component add rust-analyzer
    - name: personalization
      block:
        - name: download official git-prompt
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/git/git/refs/heads/master/contrib/completion/git-prompt.sh
            dest: ~/.config/
            mode: '0664'
        - name: update .bashrc
          ansible.builtin.blockinfile:
            path: ~/.bashrc
            append_newline: true
            prepend_newline: true
            block: |
              source .venv/bin/activate
              source ~/.config/git-prompt.sh
              get_now() {
                  date +'%Y-%m-%d %H:%M:%S'
              }
              PS1='\[\033]0;\h: \w\]\[\033[38;2;224;175;104m${debian_chroot:+($debian_chroot)}\]\[\033[38;2;115;218;202m\]\h\[\033[38;2;192;202;245m\]: \[\033[38;2;122;162;247m\]\w\[\033[38;2;247;118;142m\]$(__git_ps1 " (%s)")\[\033[38;2;54;59;84m\] - $(get_now)\n\[\033[38;2;192;202;245m\]>'
              cd ~/repos
        - name: create generic folder structure
          ansible.builtin.file:
            path: ~/{{ item }}
            state: directory
            mode: 0751
          loop:
            - repos
            - repos/public_gh
            - repos/private_gh
            - repos/projects
            - repos/sandboxes
            - repos/sandboxes/rust
            - repos/sandboxes/cpp
            - repos/sandboxes/leetcode
            - repos/third_party
    - name: utilities
      block:
        - name: install packages via apt
          become: true
          ansible.builtin.apt:
            name:
            - ripgrep
            - fd-find
        - name: get bat release tag
          ansible.builtin.uri:
            url: https://api.github.com/repos/sharkdp/bat/releases/latest
            return_content: true
          register: bat_latest
        - name: download bat{{ bat_latest.json.tag_name }}
          loop: "{{ bat_latest.json.assets }}"
          when: "'_amd64.deb' in item.name"
          ansible.builtin.get_url:
            url: "{{ item.browser_download_url }}"
            dest: "{{temp_loc}}"
            mode: "0755"
          register: bat_pkg
        - name: install bat {{ bat_latest.json.tag_name }}
          become: true
          ansible.builtin.shell: |
            sudo dpkg -i {{ bat_pkg }}
          args:
            chdir: "{{temp_loc}}"
        - name: config bat
          ansible.builtin.copy:
            src: "../configs/bat/config"
            dest: "~/.config/bat/"
        - name: get fzf release tag
          ansible.builtin.uri:
            url: https://api.github.com/repos/junegunn/fzf/releases/latest
            return_content: true
          register: zfz_latest
        - name: download fzf {{ zfz_latest.json.tag_name }}
          become: true
          loop: "{{ zfz_latest.json.assets }}"
          when: "'-linux_amd64.tar.gz' in item.name"
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ item.browser_download_url }}"
            dest: "/usr/bin/"
            extra_opts: ['--no-same-owner']
        - name: which fd-find
          ansible.builtin.command: which fdfind
          register: fd_find_path
        - name: create fd-find symlink
          become: true
          ansible.builtin.file:
            src: "{{ fd_find_path.stdout }}"
            dest: /usr/bin/fd
            state: link
        - name: update .bashrc
          ansible.builtin.blockinfile:
            path: ~/.bashrc
            append_newline: true
            block: |
              eval "$(fzf --bash)"
        - name: get latest erdtree url
          ansible.builtin.uri:
            url: https://api.github.com/repos/solidiquis/erdtree/releases/latest
            return_content: true
          register: erdtree_latest
        - name: install erdtree {{ erdtree_latest.json.tag_name }}
          become: true
          loop: "{{ erdtree_latest.json.assets }}"
          when: "'-x86_64-unknown-linux-gnu.tar.gz' in item.name"
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ item.browser_download_url }}"
            dest: "/usr/bin/"
            keep_newer: true
            include: "erd"
        - name: config erdtree
          ansible.builtin.copy:
            src: "../configs/erdtree/.erdtree.toml"
            dest: "~/.config/erdtree/"
    - name: alacritty
      vars:
        user_home: /home/{{ansible_user_id}}
        repo_root: "{{user_home}}/repos/third_party/alacritty"
        font_dir: /usr/share/fonts/nerd_ubuntu_sans/
      block:
        - name: update apt cache
          become: true
          ansible.builtin.apt:
            update_cache: true
        - name: install packages via apt
          become: true
          ansible.builtin.apt:
            name:
              - pkg-config
              - libfreetype6-dev 
              - libfontconfig1-dev
              - libxcb-xfixes0-dev
              - libxkbcommon-dev
        - name: get latest release tag from alacritty repository
          ansible.builtin.uri:
            url: https://api.github.com/repos/alacritty/alacritty/releases/latest
            return_content: true
          register: alacritty_latest
        - name: clone alacritty {{ alacritty_latest.json.tag_name }}
          ansible.builtin.git:
            repo: https://github.com/alacritty/alacritty.git
            dest: "{{ repo_root }}"
            # Note: this will set the config to fetch the latest stable tag:
            # remote.origin.fetch=+refs/tags/v0.15.0:refs/tags/v0.15.0
            # To enable normal branch behavior, use git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            version: "{{ alacritty_latest.json.tag_name }}"
        - name: build alacritty
          ansible.builtin.shell: |
            source ~/.cargo/env
            cd {{repo_root}}
            cargo build --release
        - name: install alacritty
          become: true
          ansible.builtin.shell: |
            cp ./target/release/alacritty /usr/bin
            cp ./extra/completions/alacritty.bash /etc/bash_completion.d/alacritty
            cp ./extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
            desktop-file-install ./extra/linux/Alacritty.desktop
            update-desktop-database
            mkdir -p /usr/local/share/man/man1
            mkdir -p /usr/local/share/man/man5
            scdoc < extra/man/alacritty.1.scd | gzip -c | tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null
            scdoc < extra/man/alacritty-msg.1.scd | gzip -c | tee /usr/local/share/man/man1/alacritty-msg.1.gz > /dev/null
            scdoc < extra/man/alacritty.5.scd | gzip -c | tee /usr/local/share/man/man5/alacritty.5.gz > /dev/null
            scdoc < extra/man/alacritty-bindings.5.scd | gzip -c | tee /usr/local/share/man/man5/alacritty-bindings.5.gz > /dev/null
          args:
            chdir: "{{repo_root}}"
        - name: fix git refs
          ansible.builtin.shell: |
            git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          args:
            chdir: "{{repo_root}}"
        - name: set default terminal
          ansible.builtin.shell: |
            update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/local/bin/alacritty 50
            update-alternatives --auto x-terminal-emulator
          become: true
        - name: get latest nerd fonts release
          ansible.builtin.uri:
            url: https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest
            return_content: true
          register: nf_latest
        - name: create font directory
          become: true
          ansible.builtin.file:
            path: "{{ font_dir }}"
            state: directory
            mode: '0755'
        - name: install nerd fonts {{ nf_latest.json.tag_name }}
          become: true
          loop: "{{ nf_latest.json.assets }}"
          when: "'UbuntuSans.tar.xz' in item.name"
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ item.browser_download_url }}"
            dest: "{{ font_dir }}"
            keep_newer: true
        - name: refresh font cache
          become: true
          ansible.builtin.shell: fc-cache -f -v
        - name: config alacritty
          ansible.builtin.copy:
            src: "../configs/alacritty/{{item.src}}"
            dest: "~/.config/{{item.dest}}"
          with_items:
            - { src: alacritty.toml, dest: alacritty/ }
            - { src: tokyonight_moon.toml, dest: alacritty/themes/ }
    - name: neovim
      vars:
        repo_root: "//home/{{ansible_user_id}}/repos/third_party/neovim"
      block:
        - name: update apt cache
          become: true
          ansible.builtin.apt:
            update_cache: true
        - name: install packages via apt
          become: true
          ansible.builtin.apt:
            name:
              - ninja-build
              - gettext
        - name: clone neovim
          ansible.builtin.git:
            repo: https://github.com/neovim/neovim.git
            dest: "{{repo_root}}"
            single_branch: yes
            # Note: this will set the config to fetch the latest stable tag:
            # remote.origin.fetch=+refs/tags/stable:refs/tags/stable
            # To enable normal branch behavior, use git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            version: stable
        - name: build neovim release
          community.general.make:
            chdir: "{{repo_root}}"
            params:
              CMAKE_BUILD_TYPE: Release
        - name: make install neovim
          community.general.make:
            chdir: "{{repo_root}}"
            target: install
            file: "{{repo_root}}/Makefile"
          become: true
        - name: set neovim priority
          ansible.builtin.shell: |
            update-alternatives --install /usr/bin/editor editor /usr/local/bin/nvim-wrapper 50
            update-alternatives --auto editor
            update-alternatives --install /usr/bin/vim vim /usr/local/bin/nvim-wrapper 50
            update-alternatives --auto vim
            update-alternatives --install /usr/bin/vi vi /usr/local/bin/nvim-wrapper 50
            update-alternatives --auto vi
          become: true
    - name: helix
      vars:
        user_home: /home/{{ansible_user_id}}/
      block:
        - name: get helix release tag
          ansible.builtin.uri:
            url: https://api.github.com/repos/helix-editor/helix/releases/latest
            return_content: true
          register: helix_latest
        - name: download helix {{ helix_latest.json.tag_name }}
          become: true
          loop: "{{ helix_latest.json.assets }}"
          when: "'-x86_64-linux.tar.xz' in item.name"
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ item.browser_download_url }}"
            dest: "{{temp_loc}}"
            extra_opts: ['--strip-components=1', '--show-stored-names', '--no-same-owner']
        - name: install helix {{ helix_latest.json.tag_name }}
          become: true
          ansible.builtin.shell: |
            cp ./hx /usr/bin/
            cp -r ./runtime/ /usr/bin/
          args:
            chdir: "{{temp_loc}}"
        - name: install user runtime
          ansible.builtin.shell: |
            mkdir -p {{user_home}}.config/helix/
            cp -r ./runtime/ {{user_home}}.config/helix/
          args:
            chdir: "{{temp_loc}}"
        - name: config helix
          ansible.builtin.copy:
            src: "../configs/helix/{{item.src}}"
            dest: "~/.config/{{item.dest}}"
          with_items:
            - { src: config.toml, dest: helix/}
            - { src: languages.toml, dest: helix/ }
    - name: language servers
      block:
        - name: install dependencies
          become: true
          ansible.builtin.apt:
            name:
              - npm
        - name: marksman markdown lsp
          ansible.builtin.uri:
            url: https://api.github.com/repos/artempyanykh/marksman/releases/latest
            return_content: true
          register: marksman_latest
        - name: download marksman {{ marksman_latest.json.tag_name }}
          loop: "{{ marksman_latest.json.assets }}"
          when: "'marksman-linux-x64' in item.name"
          ansible.builtin.get_url:
            url: "{{ item.browser_download_url }}"
            dest: "{{temp_loc}}"
            mode: "0755"
        - name: install marksman {{ marksman_latest.json.tag_name }}
          become: true
          ansible.builtin.shell: |
            cp {{temp_loc}}marksman-linux-x64 /usr/bin/marksman
        - name: lua language server
          ansible.builtin.uri:
            url: https://api.github.com/repos/LuaLS/lua-language-server/releases/latest
            return_content: true
          register: lua_ls_latest
        - name: lua_ls directory
          become: true
          ansible.builtin.shell: |
            mkdir -p /usr/share/lua-language-server
        - name: download lua_ls {{ lua_ls_latest.json.tag_name }}
          become: true
          loop: "{{ lua_ls_latest.json.assets }}"
          when: "'-linux-x64.tar.gz' in item.name"
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ item.browser_download_url }}"
            dest: "/usr/share/lua-language-server/"
            owner: "{{ansible_user_id }}"
            group: "{{ansible_user_id }}"
            extra_opts: ['--no-same-owner']
        - name: lua_ls directory
          ansible.builtin.shell: |
            cat << EOF >> lua-language-server
            #!/bin/bash
            exec "/usr/share/lua-language-server/bin/lua-language-server" "$@"
            EOF
            chmod +x ./lua-language-server
          args:
            chdir: "~/.local/bin/"
        - name: npm block
          become: true
          block:
          - name: yaml-language-server
            ansible.builtin.shell: npm install --global yaml-language-server@next
          - name: vscode-langservers (json, html, css, js, ts)
            ansible.builtin.shell: npm install --global vscode-langservers-extracted
          - name: bash-language-server
            ansible.builtin.shell: npm install --global bash-language-server
          - name: graphql-language-service-cli
            ansible.builtin.shell: npm install --global graphql-language-service-cli
          - name: toml-language-server
            ansible.builtin.shell: npm install -g @taplo/cli
    - name: c++ development
      vars:
        user_home: /home/{{ansible_user_id}}/
      block:
      - name: update apt cache
        become: true
        ansible.builtin.apt:
          update_cache: true
      - name: install clang
        become: true
        ansible.builtin.apt:
          name:
            - clang
            - clangd
            - libgtest-dev
            - clang-tidy
            - cppcheck
      - name: install conan package
        ansible.builtin.pip:
          virtualenv: "/home/{{ansible_user_id}}/.venv"
          name:
            - conan
            - cmakelang
      - name: cmake lsp neocmakelsp 
        ansible.builtin.shell: |
          source ~/.cargo/env
          cargo install neocmakelsp
      - name: get latest llvm
        become: true
        ansible.builtin.shell: bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
      
